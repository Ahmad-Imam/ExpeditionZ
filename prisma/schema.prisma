// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  imageUrl    String?
  clerkUserId String   @unique
  isPremium   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  memberships  Member[]
  createdTrips Trip[]

  @@index([email])
}

model Trip {
  id          String   @id @default(cuid())
  name        String
  destination String
  startDate   DateTime
  endDate     DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])

  images Json[]

  members   Member[]
  expenses  Expense[]
  checklist ChecklistItem[]
  timeline  TimelinePoint[]
  locations Location[]
  polls     Poll[]

  @@index([creatorId])
  @@index([destination])
}

model Member {
  id        String   @id @default(cuid())
  name      String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  paidExpenses Expense[] @relation("PaidBy")

  expenses ExpenseMember[]

  assignedItems ChecklistItem[] @relation("AssignedTo")

  votes PollVote[]

  @@unique([tripId, userId])
  @@index([tripId])
  @@index([userId])
}

model Expense {
  id        String   @id @default(cuid())
  title     String
  amount    Float
  category  String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  paidById String
  paidBy   Member @relation("PaidBy", fields: [paidById], references: [id], onDelete: Cascade)

  expenseMembers ExpenseMember[]

  @@index([tripId])
  @@index([paidById])
  @@index([category])
  @@index([date])
}

model ExpenseMember {
  id        String   @id @default(cuid())
  hasRepaid Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expenseId String
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([expenseId, memberId])
  @@index([expenseId])
  @@index([memberId])
  @@index([hasRepaid])
}

model ChecklistItem {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  assignedToId String?
  assignedTo   Member? @relation("AssignedTo", fields: [assignedToId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([category])
  @@index([completed])
  @@index([assignedToId])
}

model TimelinePoint {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  time        String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([date])
  @@index([completed])
}

model Location {
  id        String  @id @default(cuid())
  name      String
  address   String
  notes     String?
  category  String
  lat       Float
  lng       Float
  isVisited Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([category])
}

model Poll {
  id        String   @id @default(cuid())
  question  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tripId  String
  trip    Trip         @relation(fields: [tripId], references: [id], onDelete: Cascade)
  options PollOption[]

  @@index([tripId])
  @@index([isActive])
}

model PollOption {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  votes PollVote[]

  @@index([pollId])
}

model PollVote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  optionId String
  option   PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId, optionId])
  @@index([memberId])
  @@index([optionId])
}
